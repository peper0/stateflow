czy na pewno reactive na funkcji z yieldem powinien traktować ją specjalnie? a co jak ktoś zawoła tę funkcję z niereaktywnymi parametrami?

- [x] projekt jest zarządzany przez pdm
- [x] mamy doca do: budowania, testowania, publikowania
- [ ] github budje i testuje projekt (i testy przechodzą)
- [ ] ruff do formatowania + readme + sprawdzenie na gicie
- [ ] jakaś zbiorcza komenda (w pdm?) do uruchomienia wszystkich testów
- [ ] mypy: lokalnie, readme, na githubie i żeby przezchodziło
- [ ] example użycia: uruchamiane w czasie testów i wrzucane do doca sphinxowego (czy są gotowe rozwiązania? jak nie to zrobić proste skrypty)
- [ ] poprawić TODO w testach
- zrobić example użycia i todo bazujące na tym (patrz też milestone poniżej)
- pogadać z czatem o nazewnictwie (np notifier, var, etc)
- wypisać API w stateflow
- wprowadzić glosariusz i ustalić z chatemgpt terminologię (jakiś canvas?)

MILESTONE 1:
- [ ] obsługa synchronicznych funkcji
- [ ] var,  const
- [ ] reactive(), które wybiera najsensowniejszy wrapper i działa dla funkcji, zmiennych (stałych), modułów itp.
- [ ] funkcja do ewaluacji (z obsługą też niereaktywnych zmiennych)
- [ ] funkcja z finalizatorem
- [ ] działanie operatorów niemutujących
- [ ] rozsądne wypisywanie błędów
- [ ] wybieranie zmienną globalną, czy wyjątek z wywołania przy bindowaniu ma wylecieć, czy tylko się wypisać, czy tylko być przekazany
- [ ] zmienna globalna decudująca, czy wyjątki mają się wypisywać na konsolę

MILESTONE 2:
- [ ] obsługa metainformacji dla metod wrapowanych klas
- [ ] obsługa metod setterów (binduje do ostatniego wywołania)
- [ ] obsługa metod mutujących (nie binduje wcale) 

- rethink __eval__ vs refresh (is it really eval? or rather get_value?)
- test some diamond-like structure of vars and check if everything is computed only once and only if active

- var ma notifiera
- notifier może być w stanie active; wówczas przekazuje notyfikacje dalej
- jeśli notifier nie jest active, to tylko oznacza się jako "pending"
- notifier ma licznik observerów, którzy są active i jest active iif ten licznik jest >0
- sinki są specjalnymi observerami, którzy są active

- dekorator funkcji ma parametry "side_effects" i "sinks"
- "side effects" to funkcja biorąca parametry te same co funkcja dekorowana (bez unwrapowania) i zwracająca notifiery, które mają być dodatkowo powiadomione
- "additional deps" zwraca dodatkowe notifiery
- CallResult może być finalizowany - wówczas zakańcza bieżące wywołanie i odpina się od obserwowanych i zwraca na zawsze exception "finalized"
- xx"shared_retval" zwraca var który jest zwracany jako wartość wyjściowa i który będzie ustawiany na wartość zwróconą z tego wywołania; wszystkie poprzednie
- "override" - zwraca pudełko, do którego będzie wpisany ten call result, a jeśli był tam jakiś inny, to jest finalizowany przed wywołaniem funkcji
- hold_active(var, condition: var_or_bool)


* case1:
** tworzymy plot(window, label)
** tworzymy nowy plot z identycznymi argumentami
** przed pierwszym wywołaniem tego drugiego trzeba zcleanupować to pierwsze
** mogą oba zwracać to samo, albo ten pierwszy może zwrócić wyjątek
* case2:
** tworzymy plot(var_window, label) - var_window się może zmieniać
** zmiana var cleanupuje pierwsze wywołanie i robi drugie
* case3:
** tworzymy plot(window, label)
** tworzymy plot(var_window, label) - var_window się może zmieniać, na początku var_window != window
** var_window po jakimś czasie robi się == window
** w momencie przełączenia cleanupujemy zarówno pierwsze wywołanie jak i drugie
** potem var_window zmienia się na inne - czy przywracamy to pierwsze?


